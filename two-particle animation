import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

class Particle:
    def __init__(self, mass, position, velocity):
        self.mass = mass
        self.position = position.astype(float)
        self.velocity = velocity.astype(float)

def gravitational_force(particle1, particle2, G=2):
    r = particle2.position - particle1.position
    r_magnitude = np.linalg.norm(r)
    force_magnitude = G * particle1.mass * particle2.mass / r_magnitude**2
    force = force_magnitude * r / r_magnitude
    return force

def update_positions_velocities(particles, dt=0.01, G=2):
    for i in range(len(particles)):
        for j in range(i+1, len(particles)):
            force = gravitational_force(particles[i], particles[j], G)
            particles[i].velocity += force / particles[i].mass * dt
            particles[j].velocity -= force / particles[j].mass * dt

    for particle in particles:
        particle.position += particle.velocity * dt

#conditions for stable orbit
particle1 = Particle(mass=2, position=np.array([-1, 0]), velocity=np.array([0, 1]))
particle2 = Particle(mass=2, position=np.array([1, 0]), velocity=np.array([0, -1]))

particles_two_body = [particle1, particle2]
positions_two_body = []

fig, ax = plt.subplots(figsize=(5, 5))
scatters = [ax.scatter([], [], marker='o') for _ in particles_two_body]

ax.set_xlim(-2, 2)
ax.set_ylim(-2, 2)
ax.set_xlabel('X Position')
ax.set_ylabel('Y Position')
ax.set_title('Animated Two-Body Orbit')

def update(frame):
    positions_two_body.append([particle.position.copy() for particle in particles_two_body])
    update_positions_velocities(particles_two_body)

    for i, scatter in enumerate(scatters):
        scatter.set_offsets(positions_two_body[-1][i])

    return scatters

animation = FuncAnimation(fig, update, frames=1000, interval=20, blit=True)

#animation in Google Colab
HTML(animation.to_jshtml())
